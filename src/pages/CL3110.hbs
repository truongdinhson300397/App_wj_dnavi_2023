{{#extend "components/layout" title="企業 検索"}}
  {{#content "header-scripts" mode="append"}}
    <link rel="stylesheet" href="{{path}}css/companies.css" type="text/css" media="all"/>
  {{/content}}
  {{#content "main"}}
    <!--  -->
    <div class="contents-box">
      <article class="article-box">
        {{#unless isApplican}}
        {{> components/pageTitle jpTitle='企業をさがす' enTitle='SEARCH' }}
        {{/unless}}
        <h3 class="search-header-h3 app-mt-30">
          <span class="search-header-h3-search">詳細検索</span>
        </h3>

        <div class="drop-shadow-box">
          <table class="search-tbl">
            <tr>
              <th>キーワード</th>
              <td>
                <input type="text" class="input-text w100prc postdata" name="keyword" placeholder="企業名、事業内容など"
                       value=""/>
              </td>
            </tr>
          </table>

          <!-- 業種 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">業種</header>
            <div id="industry_type_wrap" class="search-checkbox-body dspn"></div>
          </div>

          <!-- 職種 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">職種</header>
            <div id="job_category_wrap" class="search-checkbox-body dspn"></div>
          </div>

          <!-- 本社所在地 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">本社所在地</header>
            <div id="dvHonsha" class="search-checkbox-body dspn">

            </div>
          </div>

          <!-- 従業員数 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">従業員数／職員数</header>
            <div id="dvJugyoin" class="search-checkbox-body dspn">
              <div id="employeeSize" class="search-checkbox-body-inner">

              </div>
            </div>
          </div>

          <!-- 売上高 -->
          <!-- <div class="search-checkbox-box">
          <header class="search-checkbox-header">売上高</header>
          <div id="dvUriage" class="search-checkbox-body dspn">
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />1億円未満</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />1億円〜10億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />11億円〜50億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />51億円〜100億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />101億円〜500億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />501億円〜1000億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />1001億円〜5000億円</label>
            <label class="search-checkbox-label"><input type="checkbox" name="daka" />5000億円以上</label>
          </div>
          </div> -->


          <!-- 資本金 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">資本金</header>
            <div id="dvShihonkin" class="search-checkbox-body dspn">
              <label class="search-checkbox-label"><input type="checkbox" class="input-check postdata"
                                                          name="capital_stock[]" data-capital_stock="0-5000"
                                                          value="0-5000"/> <span class="text">〜5000万円未満</span></label>
              <label class="search-checkbox-label"><input type="checkbox" class="input-check postdata"
                                                          name="capital_stock[]" data-capital_stock="5000-10000"
                                                          value="5000-10000"/> <span
                class="text">5000万円〜1億円未満</span></label>
              <label class="search-checkbox-label"><input type="checkbox" class="input-check postdata"
                                                          name="capital_stock[]" data-capital_stock="10000-30000"
                                                          value="10000-30000"/> <span
                class="text">1億円〜3億円未満</span></label>
              <label class="search-checkbox-label"><input type="checkbox" class="input-check postdata"
                                                          name="capital_stock[]" data-capital_stock="30000-"
                                                          value="30000-"/> <span
                class="text">3億円以上</span></label>
            </div>
          </div>


          <!-- 勤務地 -->
          <div class="search-checkbox-box">
            <header class="search-checkbox-header search-checkbox-header-large">勤務地</header>
            <div id="dvKinmuchi" class="search-checkbox-body dspn">
            </div>
          </div>

          <button class="btn-default btn-blue w100-50prc" id="search">上記の条件で検索</button>
        </div>

      </article>
    </div>
  {{/content}}
  {{#content "footer-scripts" mode="append"}}
    <!-- page script -->
    <script>
      _headerUIHandler(null, null, null);
      var $prefecturesWrapper = $('#dvHonsha');
      var $workingPlaceWrapper = $('#dvKinmuchi');
      var searchIndustryId = localStorage.getItem('search_industry_id');
      var searchJobCategory = localStorage.getItem('search_job_category');
      var searchAddressPrefectureId = localStorage.getItem('search_address_prefecture_id');
      var searchWorkingPlace = localStorage.getItem('search_working_place');
      var searchEmployeeSize = localStorage.getItem('search_employee_size');
      var searchCapitalStock = localStorage.getItem('search_capital_stock');
      var contractTermId = globalInfo('contract_term_id');
      var partnerId = globalInfo('partner_id');

      if (contractTermId == 2) {
        $('#job_category_wrap').parents('.search-checkbox-box').hide();
        $('#dvKinmuchi').parents('.search-checkbox-box').hide();
      }

      function _generatePrefecture(_prefectures) {
        _.forEach(_prefectures, function (_prefecture, __idx) {
          var ID = 'prefecture-' + _prefecture.group_id + '-' + __idx;
          var $marker = $('<div class="search-checkbox-header">' +
            _prefecture.group_name + '</div>');

          var $searchCheckBoxBody = $('<div id="' + ID + '" class="search-checkbox-body dspn">');

          var $item = '';
          _.forEach(_prefecture.attributes, function (_item_) {
            $item += '<label class="search-checkbox-label w7em">' +
              '<input type="checkbox" class="postdata" name="address_prefecture_id[]" data-address_prefecture_id="' + _item_.prefecture_id + '" value=' + _item_.prefecture_id + ' />' +
              '<span class="checkbox-span"></span>' + _item_.prefecture + '</label>';
          });

          $searchCheckBoxBody.append($item);
          $prefecturesWrapper.append($marker);
          $prefecturesWrapper.append($searchCheckBoxBody);
        });
      }

      function _generatePrefectureForWorkingPlace(_prefectures) {
        _.forEach(_prefectures, function (_prefecture, __idx) {
          var ID = 'prefecture-' + _prefecture.group_id + '-' + __idx;
          var workingPlaceMarker = $('<div class="search-checkbox-header">' +
            _prefecture.group_name + '</div>');

          var workingPlaceSearchCheckBoxBody = $('<div id="' + ID + '" class="search-checkbox-body dspn">');

          var $workingPlaceItem = '';
          _.forEach(_prefecture.attributes, function (_item_) {
            $workingPlaceItem += '<label class="search-checkbox-label w7em">' +
              '<input type="checkbox" class="postdata" name="working_place[]" data-working_place="' + _item_.prefecture_id + '" value=' + _item_.prefecture_id + ' />' +
              '<span class="checkbox-span"></span>' + _item_.prefecture + '</label>';
          });

          workingPlaceSearchCheckBoxBody.append($workingPlaceItem);
          $workingPlaceWrapper.append(workingPlaceMarker);
          $workingPlaceWrapper.append(workingPlaceSearchCheckBoxBody);
        });
      }

      function dumpEmployeeSizeSelection(employeeSizes) {
        var $selection = $('#employeeSize');
        employeeSizes.forEach(function (employeeSize) {
          var _$opt = '<label class="search-checkbox-label">' +
            '<input type="checkbox" class="input-check postdata" name="employee_size[]" data-employee_size="' + employeeSize.item_key + '" value="' + employeeSize.item_key + '"/>' +
            '<span class="checkbox-span"></span>' +
            '<span class="text">' + employeeSize.item_value + '</span>' +
            '</label>';
          $selection.append(_$opt);
        });
      }

      function fetchCompanyEmployeeSize() {
        var query = {contract_term_id: contractTermId, partner_id: partnerId, per_page: 999999};

        $.ajax({
          url: rootVariables.apiUrl + '/master_data/employees_num_select',
          type: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          data: query,
          success: function (res) {
            dumpEmployeeSizeSelection(res.data);
          },
          error: function (jqXhr, textStatus, errorThrown) {
            console.log(jqXhr);
            console.log(textStatus);
          }
        });
      }

      $(document).ready(function () {

        // 変数設定
        var renderCallCount = 0;
        var renderedCount = 0;

// 職種をレンダリング
        masterRadioCheckRender('job_category', 'job_category', 'categories');

// 業種をレンダリング
        masterRadioCheckRender('industry_type', 'industry_id', 'industry_types_for_company');

        _fetchPrefectureByGroup();

        fetchCompanyEmployeeSize();

        function _fetchPrefectureByGroup() {
          renderCallCount++;
          $.ajax({
            url: rootVariables.apiUrl + '/prefecture_by_group',
            dataType: 'json',
            type: 'GET',
            headers: {
              contentType: 'application/json',
              accept: 'application/json'
            },
            success: function (res) {
              var prefectures = res.data;
              if (prefectures.length > 0) {
                renderedCount++;
                _generatePrefecture(prefectures);
              }
            },
            error: function (jqXhr, textStatus, errorThrown) {
              console.log(errorThrown);
            }
          });
          renderCallCount++;
          $.ajax({
            url: rootVariables.apiUrl + '/prefecture_by_group_all',
            dataType: 'json',
            type: 'GET',
            headers: {
              contentType: 'application/json',
              accept: 'application/json'
            },
            success: function (res) {
              var prefectures = res.data;
              if (prefectures.length > 0) {
                renderedCount++;
                var prefFiltered = _.filter(prefectures, function (_pref) {
                  return _pref.group_id !== 9
                });
                _generatePrefectureForWorkingPlace(prefFiltered);
              }
            },
            error: function (jqXhr, textStatus, errorThrown) {
              console.log(errorThrown);
            }
          });
        }

// masterデータからinput radioレンダリング
        function masterRadioCheckRender(renderId, paramName, api) {
          renderCallCount++;
//		console.log('レンダリング呼び出しカウント'+renderCallCount);
          $.ajax({
            url: rootVariables.apiUrl + '/master_data/' + api + '?per_page=999',
            type: 'get',
            headers: {
              'Content-Type': 'application/json'
            },
            success: function (data) {
              // アンケート系の時は処理分け
              render(renderId, paramName, data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
//				console.log(errorThrown);
//				console.log(textStatus);
//				console.log(XMLHttpRequest);
            }
          });
        }

        // レンダリング
        function render(renderId, paramName, data) {
          // 挿入データ変数
          var labels = '';
          // 比較用初期値
          var dispClassCodeComp = '';
          for (var num in data['data']) {
            var dispClass = data['data'][num]['disp_class'];
            var dispClassCode = data['data'][num]['disp_class_code'];
            var category = data['data'][num][renderId];
            var categoryId = data['data'][num][renderId + '_id'];

            if (renderId === 'industry_type') {
              categoryId = data['data'][num]['industry_type_for_company_id'];
            }

            if (dispClassCodeComp != dispClassCode) {
              // dispClassCode(種別)が変わったら処理
              dispClassCodeComp = dispClassCode;
              // 1行目だけ処理しない
              if (dispClassCode != 1) {
                labels = labels + '</div></div>';
              }

              labels = labels + '' +
                '<div class="search-checkbox-header">' + dispClass + '</div>' +
                '<div id="dvGyoshuMaker" class="search-checkbox-body dspn">' +
                '<div class="search-checkbox-body-inner">' +
                '<div class="mgnb10-15 fb100">' +
                '<label class="label-default">' +
                '<input type="checkbox" name="" class="input-check checkall" data-checkall="' + renderId + dispClassCode + '">' +
                '<span class="checkbox-span">' +
                '</span> 全て選択する</label>' +
                '</div>';
            }

            // 項目レンダリング
            labels = labels + '' +
              '<label class="search-checkbox-label">' +
              '<input type="checkbox" class="input-check ' + renderId + dispClassCode + ' postdata" name="' + paramName + '[]" data-' + paramName + '="' + categoryId + '" value="' + categoryId + '">' +
              '<span class="checkbox-span"></span> ' +
              '<span class="text">' + category + '</span>' +
              '</label>';
          }

          if (renderId !== 'industry_type') {
            // 最後にテーブル行閉じる
            labels = labels + '</div></div>';
          } else {
            // 最後にテーブル行閉じる
            labels = labels + '</div>';
          }

          $('#' + renderId + '_wrap').append(labels);
          // レンダリング後に関数呼び出し
          renderedCount++;
//		console.log('レンダリング終了カウント'+renderedCount);
        }

        // 入力時エラー解除
        function inputErrorRemove() {
          $('input').blur(function () {
            if ($(this).val() != '') {
              $(this).removeClass('error');
            }
          });
          $('input[type="radio"],input[type="checkbox"]').on('click', function () {
            var name = $(this).attr('name');
            $('input[name="' + name + '"]').removeClass('error');
          });
        }

        function accord() {
          $('.search-checkbox-header-large,.search-checkbox-body .search-checkbox-header').on('click', function () {
            $(this).toggleClass('active').next('.search-checkbox-body').slideToggle();
          });
        }

//カテゴリ全選択
        function checkAllCategory() {
          $('.checkall').on('click', function () {
            var target = $(this).data('checkall');
//			console.log(target);
            if ($(this).prop('checked') == true) {
              $('input.' + target).prop('checked', true);
            } else {
              $('input.' + target).prop('checked', false);
            }
          });
        }

// 選択肢が1つの時、全て選択を消す
        function checkAllremover() {
          $('.label-columns').each(function () {
            var labelnum = $(this).children('.label-default').length;
            if (labelnum == 1) {
              $(this).prev('th').children('div').remove();
            }
          });
        }

// レンダリング監視＆仮会員情報挿入処理
        var renderTimer, timeoutTimer;
        startTimer();
        timeoutAlert();

        function startTimer() {
          renderTimer = setInterval(function () {
//			console.log('インターバル中');
//			console.log(renderedCount);
            // レンダリングが終了したら
            if (renderedCount == renderCallCount) {
//				console.log('仮会員データ挿入＆停止');
              inputErrorRemove();
              checkAllCategory();
              checkAllremover();
              accord();
              clearInterval(renderTimer);
              clearTimeout(timeoutTimer);
              keepConditionSearch();
            }
          }, 500);
        }

        function timeoutAlert() {
          // 60秒経過でレンダリング未完了時アラート＆レンダリング監視停止
          timeoutTimer = setTimeout(function () {
            if (renderedCount != renderCallCount) {
              alert('ページの読み込みが正常に完了しませんでした。リロードしてください。');
            }
//			console.log('タイムアウト');
            clearInterval(renderTimer);
          }, 60000);
        }

        $('#search').on('click', function () {
          var searchParam = $('.postdata').serializeArray();
          var postData = formAdjust(searchParam);
          var param = '';
          var paramNum = 0;
          for (i in postData) {
            if (postData[i] != null) {
              if (paramNum == 0) {
                param = param + i + '=' + postData[i];
              } else {
                param = param + '&' + i + '=' + postData[i];
              }
              paramNum++;
            }
          }
          if (param) {
            param = '?' + param;
          }
          toLocationHref(companySearchUrl + param);
        });

        function keepConditionSearch() {
          if (!_.isNull(searchIndustryId) && !_.isUndefined(searchIndustryId)) {
            autoCheckConditionSearch('search_industry_id', searchIndustryId);
          }
          if (!_.isNull(searchJobCategory) && !_.isUndefined(searchJobCategory)) {
            autoCheckConditionSearch('search_job_category', searchJobCategory);
          }
          if (!_.isNull(searchAddressPrefectureId) && !_.isUndefined(searchAddressPrefectureId)) {
            autoCheckConditionSearch('search_address_prefecture_id', searchAddressPrefectureId);
          }
          if (!_.isNull(searchWorkingPlace) && !_.isUndefined(searchWorkingPlace)) {
            autoCheckConditionSearch('search_working_place', searchWorkingPlace);
          }
          if (!_.isNull(searchEmployeeSize) && !_.isUndefined(searchEmployeeSize)) {
            autoCheckConditionSearch('search_employee_size', searchEmployeeSize);
          }
          if (!_.isNull(searchCapitalStock) && !_.isUndefined(searchCapitalStock)) {
            autoCheckConditionSearch('search_capital_stock', searchCapitalStock);
          }
        }

        function autoCheckConditionSearch(key, value) {
          // remove search
          var keySearch = key.slice(7, key.length);
          var arrayValue = value.split(",");
          _.forEach(arrayValue, function (item) {
            $('input[data-' + keySearch + '="' + item + '"]').prop('checked', true);
          })
        }

      });
    </script>

    <style>
      .search-checkbox-header-large,
      .search-checkbox-header,
      label {
        cursor: pointer;
      }
    </style>
  {{/content}}
{{/extend}}
